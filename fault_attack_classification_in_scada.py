# -*- coding: utf-8 -*-
"""Fault-attack classification in SCADA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Qyvgb2tPdP2OeH7Uqt0iw5fj3LJZzir4
"""

import pandas as pd
import numpy as np

data = pd.read_csv('data1.csv')

data.head()

# Rename columns
data.rename(columns = {'R1-PA1:VH':'R1_Va_ang', 'R1-PM1:V':'R1_Va_mag',
                       'R1-PA2:VH':'R1_Vb_ang', 'R1-PM2:V':'R1_Vb_mag',
                       'R1-PA3:VH':'R1_Vc_ang', 'R1-PM3:V':'R1_Vc_mag',
                       'R1-PA4:IH':'R1_Ia_ang', 'R1-PM4:I':'R1_Ia_mag',
                       'R1-PA5:IH':'R1_Ib_ang', 'R1-PM5:I':'R1_Ib_mag',
                       'R1-PA6:IH':'R1_Ic_ang', 'R1-PM6:I':'R1_Ic_mag',
                       'R1-PA7:VH':'R1_Va1_ang', 'R1-PM7:V':'R1_Va1_mag',
                       'R1-PA8:VH':'R1_Va2_ang', 'R1-PM8:V':'R1_Va2_mag',
                       'R1-PA9:VH':'R1_Va0_ang', 'R1-PM9:V':'R1_Va0_mag',
                       'R1-PA10:IH':'R1_Ia1_ang', 'R1-PM10:I':'R1_Ia1_mag',
                       'R1-PA11:IH':'R1_Ia2_ang', 'R1-PM11:I':'R1_Ia2_mag',
                       'R1-PA12:IH':'R1_Ia0_ang', 'R1-PM12:I':'R1_Ia0_mag',
                       'R1:F':'R1_freq', 'R1:DF':'R1_freq_chag',
                       'R1-PA:Z':'R1_Z_mag', 'R1-PA:ZH':'R1_Z_ang',

                       'R2-PA1:VH':'R2_Va_ang', 'R2-PM1:V':'R2_Va_mag',
                       'R2-PA2:VH':'R2_Vb_ang', 'R2-PM2:V':'R2_Vb_mag',
                       'R2-PA3:VH':'R2_Vc_ang', 'R2-PM3:V':'R2_Vc_mag',
                       'R2-PA4:IH':'R2_Ia_ang', 'R2-PM4:I':'R2_Ia_mag',
                       'R2-PA5:IH':'R2_Ib_ang', 'R2-PM5:I':'R2_Ib_mag',
                       'R2-PA6:IH':'R2_Ic_ang', 'R2-PM6:I':'R2_Ic_mag',
                       'R2-PA7:VH':'R2_Va1_ang', 'R2-PM7:V':'R2_Va1_mag',
                       'R2-PA8:VH':'R2_Va2_ang', 'R2-PM8:V':'R2_Va2_mag',
                       'R2-PA9:VH':'R2_Va0_ang', 'R2-PM9:V':'R2_Va0_mag',
                       'R2-PA10:IH':'R2_Ia1_ang', 'R2-PM10:I':'R2_Ia1_mag',
                       'R2-PA11:IH':'R2_Ia2_ang', 'R2-PM11:I':'R2_Ia2_mag',
                       'R2-PA12:IH':'R2_Ia0_ang', 'R2-PM12:I':'R2_Ia0_mag',
                       'R2:F':'R2_freq', 'R2:DF':'R2_freq_chag',
                       'R2-PA:Z':'R2_Z_mag', 'R2-PA:ZH':'R2_Z_ang',

                       'R3-PA1:VH':'R3_Va_ang', 'R3-PM1:V':'R3_Va_mag',
                       'R3-PA2:VH':'R3_Vb_ang', 'R3-PM2:V':'R3_Vb_mag',
                       'R3-PA3:VH':'R3_Vc_ang', 'R3-PM3:V':'R3_Vc_mag',
                       'R3-PA4:IH':'R3_Ia_ang', 'R3-PM4:I':'R3_Ia_mag',
                       'R3-PA5:IH':'R3_Ib_ang', 'R3-PM5:I':'R3_Ib_mag',
                       'R3-PA6:IH':'R3_Ic_ang', 'R3-PM6:I':'R3_Ic_mag',
                       'R3-PA7:VH':'R3_Va1_ang', 'R3-PM7:V':'R3_Va1_mag',
                       'R3-PA8:VH':'R3_Va2_ang', 'R3-PM8:V':'R3_Va2_mag',
                       'R3-PA9:VH':'R3_Va0_ang', 'R3-PM9:V':'R3_Va0_mag',
                       'R3-PA10:IH':'R3_Ia1_ang', 'R3-PM10:I':'R3_Ia1_mag',
                       'R3-PA11:IH':'R3_Ia2_ang', 'R3-PM11:I':'R3_Ia2_mag',
                       'R3-PA12:IH':'R3_Ia0_ang', 'R3-PM12:I':'R3_Ia0_mag',
                       'R3:F':'R3_freq', 'R3:DF':'R3_freq_chag',
                       'R3-PA:Z':'R3_Z_mag', 'R3-PA:ZH':'R3_Z_ang',

                       'R4-PA1:VH':'R4_Va_ang', 'R4-PM1:V':'R4_Va_mag',
                       'R4-PA2:VH':'R4_Vb_ang', 'R4-PM2:V':'R4_Vb_mag',
                       'R4-PA3:VH':'R4_Vc_ang', 'R4-PM3:V':'R4_Vc_mag',
                       'R4-PA4:IH':'R4_Ia_ang', 'R4-PM4:I':'R4_Ia_mag',
                       'R4-PA5:IH':'R4_Ib_ang', 'R4-PM5:I':'R4_Ib_mag',
                       'R4-PA6:IH':'R4_Ic_ang', 'R4-PM6:I':'R4_Ic_mag',
                       'R4-PA7:VH':'R4_Va1_ang', 'R4-PM7:V':'R4_Va1_mag',
                       'R4-PA8:VH':'R4_Va2_ang', 'R4-PM8:V':'R4_Va2_mag',
                       'R4-PA9:VH':'R4_Va0_ang', 'R4-PM9:V':'R4_Va0_mag',
                       'R4-PA10:IH':'R4_Ia1_ang', 'R4-PM10:I':'R4_Ia1_mag',
                       'R4-PA11:IH':'R4_Ia2_ang', 'R4-PM11:I':'R4_Ia2_mag',
                       'R4-PA12:IH':'R4_Ia0_ang', 'R4-PM12:I':'R4_Ia0_mag',
                       'R4:F':'R4_freq', 'R4:DF':'R4_freq_chag',
                       'R4-PA:Z':'R4_Z_mag', 'R4-PA:ZH':'R4_Z_ang',}, inplace = True)

# Split# Combine magnitude and angle columns
import cmath,math

data['R1_Va'] = data.apply(lambda x: x['R1_Va_mag']* (math.cos((x['R1_Va_ang']*math.pi)/180) + 1j * math.sin((x['R1_Va_ang']*math.pi)/180)) , axis=1)
data['R1_Vb'] = data.apply(lambda x: x['R1_Vb_mag']* (math.cos((x['R1_Vb_ang']*math.pi)/180) + 1j * math.sin((x['R1_Vb_ang']*math.pi)/180)) , axis=1)
data['R1_Vc'] = data.apply(lambda x: x['R1_Vc_mag']* (math.cos((x['R1_Vc_ang']*math.pi)/180) + 1j * math.sin((x['R1_Vc_ang']*math.pi)/180)) , axis=1)
data['R1_Ia'] = data.apply(lambda x: x['R1_Ia_mag']* (math.cos((x['R1_Ia_ang']*math.pi)/180) + 1j * math.sin((x['R1_Ia_ang']*math.pi)/180)) , axis=1)
data['R1_Ib'] = data.apply(lambda x: x['R1_Ib_mag']* (math.cos((x['R1_Ib_ang']*math.pi)/180) + 1j * math.sin((x['R1_Ib_ang']*math.pi)/180)) , axis=1)
data['R1_Ic'] = data.apply(lambda x: x['R1_Ic_mag']* (math.cos((x['R1_Ic_ang']*math.pi)/180) + 1j * math.sin((x['R1_Ic_ang']*math.pi)/180)) , axis=1)
data['R1_Va1'] = data.apply(lambda x: x['R1_Va1_mag']* (math.cos((x['R1_Va1_ang']*math.pi)/180) + 1j * math.sin((x['R1_Va1_ang']*math.pi)/180)) , axis=1)
data['R1_Va2'] = data.apply(lambda x: x['R1_Va2_mag']* (math.cos((x['R1_Va2_ang']*math.pi)/180) + 1j * math.sin((x['R1_Va2_ang']*math.pi)/180)) , axis=1)
data['R1_Va0'] = data.apply(lambda x: x['R1_Va0_mag']* (math.cos((x['R1_Va0_ang']*math.pi)/180) + 1j * math.sin((x['R1_Va0_ang']*math.pi)/180)) , axis=1)
data['R1_Ia1'] = data.apply(lambda x: x['R1_Ia1_mag']* (math.cos((x['R1_Ia1_ang']*math.pi)/180) + 1j * math.sin((x['R1_Ia1_ang']*math.pi)/180)) , axis=1)
data['R1_Ia2'] = data.apply(lambda x: x['R1_Ia2_mag']* (math.cos((x['R1_Ia2_ang']*math.pi)/180) + 1j * math.sin((x['R1_Ia2_ang']*math.pi)/180)) , axis=1)
data['R1_Ia0'] = data.apply(lambda x: x['R1_Ia0_mag']* (math.cos((x['R1_Ia0_ang']*math.pi)/180) + 1j * math.sin((x['R1_Ia0_ang']*math.pi)/180)) , axis=1)
data['R1_Z'] = data.apply(lambda x: x['R1_Z_mag']* (math.cos((x['R1_Z_ang']*math.pi)/180) + 1j * math.sin((x['R1_Z_ang']*math.pi)/180)) , axis=1)

data['R2_Va'] = data.apply(lambda x: x['R2_Va_mag']* (math.cos((x['R2_Va_ang']*math.pi)/180) + 1j * math.sin((x['R2_Va_ang']*math.pi)/180)) , axis=1)
data['R2_Vb'] = data.apply(lambda x: x['R2_Vb_mag']* (math.cos((x['R2_Vb_ang']*math.pi)/180) + 1j * math.sin((x['R2_Vb_ang']*math.pi)/180)) , axis=1)
data['R2_Vc'] = data.apply(lambda x: x['R2_Vc_mag']* (math.cos((x['R2_Vc_ang']*math.pi)/180) + 1j * math.sin((x['R2_Vc_ang']*math.pi)/180)) , axis=1)
data['R2_Ia'] = data.apply(lambda x: x['R2_Ia_mag']* (math.cos((x['R2_Ia_ang']*math.pi)/180) + 1j * math.sin((x['R2_Ia_ang']*math.pi)/180)) , axis=1)
data['R2_Ib'] = data.apply(lambda x: x['R2_Ib_mag']* (math.cos((x['R2_Ib_ang']*math.pi)/180) + 1j * math.sin((x['R2_Ib_ang']*math.pi)/180)) , axis=1)
data['R2_Ic'] = data.apply(lambda x: x['R2_Ic_mag']* (math.cos((x['R2_Ic_ang']*math.pi)/180) + 1j * math.sin((x['R2_Ic_ang']*math.pi)/180)) , axis=1)
data['R2_Va1'] = data.apply(lambda x: x['R2_Va1_mag']* (math.cos((x['R2_Va1_ang']*math.pi)/180) + 1j * math.sin((x['R2_Va1_ang']*math.pi)/180)) , axis=1)
data['R2_Va2'] = data.apply(lambda x: x['R2_Va2_mag']* (math.cos((x['R2_Va2_ang']*math.pi)/180) + 1j * math.sin((x['R2_Va2_ang']*math.pi)/180)) , axis=1)
data['R2_Va0'] = data.apply(lambda x: x['R2_Va0_mag']* (math.cos((x['R2_Va0_ang']*math.pi)/180) + 1j * math.sin((x['R2_Va0_ang']*math.pi)/180)) , axis=1)
data['R2_Ia1'] = data.apply(lambda x: x['R2_Ia1_mag']* (math.cos((x['R2_Ia1_ang']*math.pi)/180) + 1j * math.sin((x['R2_Ia1_ang']*math.pi)/180)) , axis=1)
data['R2_Ia2'] = data.apply(lambda x: x['R2_Ia2_mag']* (math.cos((x['R2_Ia2_ang']*math.pi)/180) + 1j * math.sin((x['R2_Ia2_ang']*math.pi)/180)) , axis=1)
data['R2_Ia0'] = data.apply(lambda x: x['R2_Ia0_mag']* (math.cos((x['R2_Ia0_ang']*math.pi)/180) + 1j * math.sin((x['R2_Ia0_ang']*math.pi)/180)) , axis=1)
data['R2_Z'] = data.apply(lambda x: x['R2_Z_mag']* (math.cos((x['R2_Z_ang']*math.pi)/180) + 1j * math.sin((x['R2_Z_ang']*math.pi)/180)) , axis=1)

data['R3_Va'] = data.apply(lambda x: x['R3_Va_mag']* (math.cos((x['R3_Va_ang']*math.pi)/180) + 1j * math.sin((x['R3_Va_ang']*math.pi)/180)) , axis=1)
data['R3_Vb'] = data.apply(lambda x: x['R3_Vb_mag']* (math.cos((x['R3_Vb_ang']*math.pi)/180) + 1j * math.sin((x['R3_Vb_ang']*math.pi)/180)) , axis=1)
data['R3_Vc'] = data.apply(lambda x: x['R3_Vc_mag']* (math.cos((x['R3_Vc_ang']*math.pi)/180) + 1j * math.sin((x['R3_Vc_ang']*math.pi)/180)) , axis=1)
data['R3_Ia'] = data.apply(lambda x: x['R3_Ia_mag']* (math.cos((x['R3_Ia_ang']*math.pi)/180) + 1j * math.sin((x['R3_Ia_ang']*math.pi)/180)) , axis=1)
data['R3_Ib'] = data.apply(lambda x: x['R3_Ib_mag']* (math.cos((x['R3_Ib_ang']*math.pi)/180) + 1j * math.sin((x['R3_Ib_ang']*math.pi)/180)) , axis=1)
data['R3_Ic'] = data.apply(lambda x: x['R3_Ic_mag']* (math.cos((x['R3_Ic_ang']*math.pi)/180) + 1j * math.sin((x['R3_Ic_ang']*math.pi)/180)) , axis=1)
data['R3_Va1'] = data.apply(lambda x: x['R3_Va1_mag']* (math.cos((x['R3_Va1_ang']*math.pi)/180) + 1j * math.sin((x['R3_Va1_ang']*math.pi)/180)) , axis=1)
data['R3_Va2'] = data.apply(lambda x: x['R3_Va2_mag']* (math.cos((x['R3_Va2_ang']*math.pi)/180) + 1j * math.sin((x['R3_Va2_ang']*math.pi)/180)) , axis=1)
data['R3_Va0'] = data.apply(lambda x: x['R3_Va0_mag']* (math.cos((x['R3_Va0_ang']*math.pi)/180) + 1j * math.sin((x['R3_Va0_ang']*math.pi)/180)) , axis=1)
data['R3_Ia1'] = data.apply(lambda x: x['R3_Ia1_mag']* (math.cos((x['R3_Ia1_ang']*math.pi)/180) + 1j * math.sin((x['R3_Ia1_ang']*math.pi)/180)) , axis=1)
data['R3_Ia2'] = data.apply(lambda x: x['R3_Ia2_mag']* (math.cos((x['R3_Ia2_ang']*math.pi)/180) + 1j * math.sin((x['R3_Ia2_ang']*math.pi)/180)) , axis=1)
data['R3_Ia0'] = data.apply(lambda x: x['R3_Ia0_mag']* (math.cos((x['R3_Ia0_ang']*math.pi)/180) + 1j * math.sin((x['R3_Ia0_ang']*math.pi)/180)) , axis=1)
data['R3_Z'] = data.apply(lambda x: x['R3_Z_mag']* (math.cos((x['R3_Z_ang']*math.pi)/180) + 1j * math.sin((x['R3_Z_ang']*math.pi)/180)) , axis=1)

data['R4_Va'] = data.apply(lambda x: x['R4_Va_mag']* (math.cos((x['R4_Va_ang']*math.pi)/180) + 1j * math.sin((x['R4_Va_ang']*math.pi)/180)) , axis=1)
data['R4_Vb'] = data.apply(lambda x: x['R4_Vb_mag']* (math.cos((x['R4_Vb_ang']*math.pi)/180) + 1j * math.sin((x['R4_Vb_ang']*math.pi)/180)) , axis=1)
data['R4_Vc'] = data.apply(lambda x: x['R4_Vc_mag']* (math.cos((x['R4_Vc_ang']*math.pi)/180) + 1j * math.sin((x['R4_Vc_ang']*math.pi)/180)) , axis=1)
data['R4_Ia'] = data.apply(lambda x: x['R4_Ia_mag']* (math.cos((x['R4_Ia_ang']*math.pi)/180) + 1j * math.sin((x['R4_Ia_ang']*math.pi)/180)) , axis=1)
data['R4_Ib'] = data.apply(lambda x: x['R4_Ib_mag']* (math.cos((x['R4_Ib_ang']*math.pi)/180) + 1j * math.sin((x['R4_Ib_ang']*math.pi)/180)) , axis=1)
data['R4_Ic'] = data.apply(lambda x: x['R4_Ic_mag']* (math.cos((x['R4_Ic_ang']*math.pi)/180) + 1j * math.sin((x['R4_Ic_ang']*math.pi)/180)) , axis=1)
data['R4_Va1'] = data.apply(lambda x: x['R4_Va1_mag']* (math.cos((x['R4_Va1_ang']*math.pi)/180) + 1j * math.sin((x['R4_Va1_ang']*math.pi)/180)) , axis=1)
data['R4_Va2'] = data.apply(lambda x: x['R4_Va2_mag']* (math.cos((x['R4_Va2_ang']*math.pi)/180) + 1j * math.sin((x['R4_Va2_ang']*math.pi)/180)) , axis=1)
data['R4_Va0'] = data.apply(lambda x: x['R4_Va0_mag']* (math.cos((x['R4_Va0_ang']*math.pi)/180) + 1j * math.sin((x['R4_Va0_ang']*math.pi)/180)) , axis=1)
data['R4_Ia1'] = data.apply(lambda x: x['R4_Ia1_mag']* (math.cos((x['R4_Ia1_ang']*math.pi)/180) + 1j * math.sin((x['R4_Ia1_ang']*math.pi)/180)) , axis=1)
data['R4_Ia2'] = data.apply(lambda x: x['R4_Ia2_mag']* (math.cos((x['R4_Ia2_ang']*math.pi)/180) + 1j * math.sin((x['R4_Ia2_ang']*math.pi)/180)) , axis=1)
data['R4_Ia0'] = data.apply(lambda x: x['R4_Ia0_mag']* (math.cos((x['R4_Ia0_ang']*math.pi)/180) + 1j * math.sin((x['R4_Ia0_ang']*math.pi)/180)) , axis=1)
data['R4_Z'] = data.apply(lambda x: x['R4_Z_mag']* (math.cos((x['R4_Z_ang']*math.pi)/180) + 1j * math.sin((x['R4_Z_ang']*math.pi)/180)) , axis=1)

# Delete extra columns
data = data.drop(columns=['R1_Z_ang', 'R1_Z_mag',
                 'R2_Z_ang', 'R2_Z_mag',
                 'R3_Z_ang', 'R3_Z_mag',
                 'R4_Z_ang', 'R4_Z_mag'], axis=1)

# df/dt Graph for R1
import pandas as pd
import seaborn as sns
import numpy as np
import matplotlib.pyplot as plt


fig = sns.scatterplot(x=data['R1_freq_chag'], y=data['R1_Z'])
#plt.scatter(x=data['R1_freq_chag'], y=data['R1_Z'])
plt.title("Scatterplot of Rate of Change of Frequency due to Load variations", fontsize=15)
plt.xlabel("df/dt values", fontsize=12.5)
plt.ylabel("Impedence of Relay 1", fontsize=12.5)
plt.show(fig)

# Declare a and a_square. Ia = Ia0+ a*Ia1 + a_square*Ia2
a = -0.5+0.86602540378j
a_sq = -0.5-0.86602540378j

# Fault current same for all cases of line faults
data['R1_Iaf'] = data.apply(lambda x: x['R1_Ia0'] + a*x['R1_Ia1'] + a_sq*x['R1_Ia2'], axis=1)
data['R2_Iaf'] = data.apply(lambda x: x['R2_Ia0'] + a*x['R2_Ia1'] + a_sq*x['R2_Ia2'], axis=1)
data['R3_Iaf'] = data.apply(lambda x: x['R3_Ia0'] + a*x['R3_Ia1'] + a_sq*x['R4_Ia2'], axis=1)
data['R4_Iaf'] = data.apply(lambda x: x['R4_Ia0'] + a*x['R4_Ia1'] + a_sq*x['R4_Ia2'], axis=1)
data['Iaf'] = data.apply(lambda x: x['R1_Iaf'] + x['R2_Iaf'] + x['R3_Iaf'] + x['R4_Iaf'], axis=1)

# Line impedence of L1, L2 not given. Assume L1_Z = L2_Z = 5+10j
data['L1_Z'] = 5+10j
data['L2_Z'] = 5+10j

# Line 1 - 10% fault
data['L1_10_Zf'] = 0.1 * data['L1_Z']
data['L1_10_Vf'] = data.apply(lambda x: (x['L1_10_Zf']*x['Iaf']) + 0.1*(x['Iaf']/3)*3*(x['R1_Z']) , axis=1)

# Line 1 - 50% fault
data['L1_20_Zf'] = data.apply(lambda x: ((x['R1_Z'] + 0.5*x['L1_Z']) * (x['R2_Z']+x['R3_Z']+x['R4_Z']+0.5*x['L1_Z']+x['L2_Z']))/(x['R1_Z']+x['R2_Z']+x['R3_Z']+x['R4_Z']+x['L1_Z']+x['L2_Z']), axis=1)
data['L1_20_Vf'] = data.apply(lambda x: (x['L1_20_Zf']*x['Iaf']) + 0.5*(x['Iaf']/3)*3*(x['R1_Z']) , axis=1)

# Line 1 - 75% fault
data['L1_75_Zf'] = data.apply(lambda x: ((x['R1_Z'] + 0.75*x['L1_Z']) * (x['R2_Z']+x['R3_Z']+x['R4_Z']+0.25*x['L1_Z']+x['L2_Z']))/(x['R1_Z']+x['R2_Z']+x['R3_Z']+x['R4_Z']+x['L1_Z']+x['L2_Z']), axis=1)
data['L1_75_Vf'] = data.apply(lambda x: (x['L1_20_Zf']*x['Iaf']) + 0.75*(x['Iaf']/3)*3*(x['R1_Z']) , axis=1)

# Line 1 - 90% fault
data['L1_90_Zf'] = data.apply(lambda x: ((x['R1_Z']+x['R2_Z']+0.9*x['L1_Z']) * (x['R3_Z']+x['R4_Z']+0.1*x['L1_Z']+x['L2_Z']))/(x['R1_Z']+x['R2_Z']+x['R3_Z']+x['R4_Z']+x['L1_Z']+x['L2_Z']), axis=1)
data['L1_90_Vf'] = data.apply(lambda x: (x['L1_90_Zf']*x['Iaf']) + 0.9*(x['Iaf']/3)*3*(x['R2_Z']) , axis=1)

# Line 2 - 10% fault
data['L2_10_Zf'] = 0.1 * data['L2_Z']
data['L2_10_Vf'] = data.apply(lambda x: (x['L2_10_Zf']*x['Iaf']) + 0.1*(x['Iaf']/3)*3*(x['R3_Z']) , axis=1)

# Line 2 - 50% fault
data['L2_20_Zf'] = data.apply(lambda x: ((x['R4_Z'] + 0.5*x['L2_Z']) * (x['R1_Z']+x['R2_Z']+x['R3_Z']+0.5*x['L2_Z']+x['L1_Z']))/(x['R1_Z']+x['R2_Z']+x['R3_Z']+x['R4_Z']+x['L1_Z']+x['L2_Z']), axis=1)
data['L2_20_Vf'] = data.apply(lambda x: (x['L2_10_Zf']*x['Iaf']) + 0.5*(x['Iaf']/3)*3*(x['R3_Z']) , axis=1)

# Line 2 - 75% fault
data['L2_75_Zf'] = data.apply(lambda x: ((x['R4_Z'] + 0.75*x['L2_Z']) * (x['R1_Z']+x['R2_Z']+x['R3_Z']+0.25*x['L2_Z']+x['L1_Z']))/(x['R1_Z']+x['R2_Z']+x['R3_Z']+x['R4_Z']+x['L1_Z']+x['L2_Z']), axis=1)
data['L2_75_Vf'] = data.apply(lambda x: (x['L2_10_Zf']*x['Iaf']) + 0.75*(x['Iaf']/3)*3*(x['R3_Z']) , axis=1)

# Line 2 - 90% fault
data['L2_90_Zf'] = data.apply(lambda x: ((x['R1_Z']+x['R2_Z']+0.1*x['L2_Z']+x['L1_Z']) * (x['R3_Z']+x['R4_Z']+0.9*x['L1_Z']))/(x['R1_Z']+x['R2_Z']+x['R3_Z']+x['R4_Z']+x['L1_Z']+x['L2_Z']), axis=1)
data['L2_90_Vf'] = data.apply(lambda x: (x['L2_90_Zf']*x['Iaf']) + 0.9*(x['Iaf']/3)*3*(x['R4_Z']) , axis=1)

# Line 1 - 10% fault
X = data[['R1_Ia1', 'R1_Ia2', 'R1_Ia0', 'Iaf', 'control_panel_log1']]
y = data[['marker']]

#X['V_mag'] = data.apply(lambda x: cmath.polar(x['L1_10_Vf'])[0], axis=1)
X['Iaf_mag'] = data.apply(lambda x: cmath.polar(x['Iaf'])[0], axis=1)
#X['Iaf_ang'] = data.apply(lambda x: cmath.polar(x['Iaf'])[1], axis=1)
X['R1_Ia1_mag'] = data.apply(lambda x: cmath.polar(x['R1_Ia1'])[0], axis=1)
X['R1_Ia2_mag'] = data.apply(lambda x: cmath.polar(x['R1_Ia2'])[0], axis=1)
X['R1_Ia0_mag'] = data.apply(lambda x: cmath.polar(x['R1_Ia0'])[0], axis=1)
#X['Zf_mag'] = data.apply(lambda x: cmath.polar(x['L1_10_Zf'])[0], axis=1)

import matplotlib.pyplot as plt
X['Iaf_mag'].plot()

# create a list of conditions
conditions = [
    (X['Iaf_mag'] >= 400),
    (X['Iaf_mag'] >= 200) & (X['Iaf_mag'] < 400),
    (X['Iaf_mag'] >= 50) & (X['Iaf_mag'] < 200),
    (X['Iaf_mag'] >= 0) & (X['Iaf_mag'] < 50)
    ]

# create a list of the values we want to assign for each condition
values = ['High', 'Warning', 'Normal', 'Zero']

# create a new column and use np.select to assign values to it using our lists as arguments
data['Current_tier'] = np.select(conditions, values)

# display updated DataFrame
data.head()

# Declare real Relay conditions for R1

# create a list of conditions
conditions = [
    (data['Current_tier'] == 'Normal') & (data['control_panel_log1'] == 0) & (data['snort_log1'] == 0) & (data['relay1_log'] == 0),
    (data['Current_tier'] == 'Normal') & (data['control_panel_log1'] == 0) & (data['snort_log1'] == 0) & (data['relay1_log'] == 1),
    (data['Current_tier'] == 'Normal') & (data['control_panel_log1'] == 0) & (data['snort_log1'] == 1) & (data['relay1_log'] == 0),
    (data['Current_tier'] == 'Normal') & (data['control_panel_log1'] == 0) & (data['snort_log1'] == 1) & (data['relay1_log'] == 1),
    (data['Current_tier'] == 'Normal') & (data['control_panel_log1'] == 1) & (data['snort_log1'] == 0) & (data['relay1_log'] == 0),
    (data['Current_tier'] == 'Normal') & (data['control_panel_log1'] == 1) & (data['snort_log1'] == 0) & (data['relay1_log'] == 1),
    (data['Current_tier'] == 'Normal') & (data['control_panel_log1'] == 1) & (data['snort_log1'] == 1) & (data['relay1_log'] == 0),
    (data['Current_tier'] == 'Normal') & (data['control_panel_log1'] == 1) & (data['snort_log1'] == 1) & (data['relay1_log'] == 1),

    (data['Current_tier'] == 'Zero') & (data['control_panel_log1'] == 0) & (data['snort_log1'] == 0) & (data['relay1_log'] == 0),
    (data['Current_tier'] == 'Zero') & (data['control_panel_log1'] == 0) & (data['snort_log1'] == 0) & (data['relay1_log'] == 1),
    (data['Current_tier'] == 'Zero') & (data['control_panel_log1'] == 0) & (data['snort_log1'] == 1) & (data['relay1_log'] == 0),
    (data['Current_tier'] == 'Zero') & (data['control_panel_log1'] == 0) & (data['snort_log1'] == 1) & (data['relay1_log'] == 1),
    (data['Current_tier'] == 'Zero') & (data['control_panel_log1'] == 1) & (data['snort_log1'] == 0) & (data['relay1_log'] == 0),
    (data['Current_tier'] == 'Zero') & (data['control_panel_log1'] == 1) & (data['snort_log1'] == 0) & (data['relay1_log'] == 1),
    (data['Current_tier'] == 'Zero') & (data['control_panel_log1'] == 1) & (data['snort_log1'] == 1) & (data['relay1_log'] == 0),
    (data['Current_tier'] == 'Zero') & (data['control_panel_log1'] == 1) & (data['snort_log1'] == 1) & (data['relay1_log'] == 1),

    (data['Current_tier'] == 'Warning') & (data['control_panel_log1'] == 0) & (data['snort_log1'] == 0) & (data['relay1_log'] == 0),
    (data['Current_tier'] == 'Warning') & (data['control_panel_log1'] == 0) & (data['snort_log1'] == 0) & (data['relay1_log'] == 1),
    (data['Current_tier'] == 'Warning') & (data['control_panel_log1'] == 0) & (data['snort_log1'] == 1) & (data['relay1_log'] == 0),
    (data['Current_tier'] == 'Warning') & (data['control_panel_log1'] == 0) & (data['snort_log1'] == 1) & (data['relay1_log'] == 1),
    (data['Current_tier'] == 'Warning') & (data['control_panel_log1'] == 1) & (data['snort_log1'] == 0) & (data['relay1_log'] == 0),
    (data['Current_tier'] == 'Warning') & (data['control_panel_log1'] == 1) & (data['snort_log1'] == 0) & (data['relay1_log'] == 1),
    (data['Current_tier'] == 'Warning') & (data['control_panel_log1'] == 1) & (data['snort_log1'] == 1) & (data['relay1_log'] == 0),
    (data['Current_tier'] == 'Warning') & (data['control_panel_log1'] == 1) & (data['snort_log1'] == 1) & (data['relay1_log'] == 1),

    (data['Current_tier'] == 'High') & (data['control_panel_log1'] == 0) & (data['snort_log1'] == 0) & (data['relay1_log'] == 0),
    (data['Current_tier'] == 'High') & (data['control_panel_log1'] == 0) & (data['snort_log1'] == 0) & (data['relay1_log'] == 1),
    (data['Current_tier'] == 'High') & (data['control_panel_log1'] == 0) & (data['snort_log1'] == 1) & (data['relay1_log'] == 0),
    (data['Current_tier'] == 'High') & (data['control_panel_log1'] == 0) & (data['snort_log1'] == 1) & (data['relay1_log'] == 1),
    (data['Current_tier'] == 'High') & (data['control_panel_log1'] == 1) & (data['snort_log1'] == 0) & (data['relay1_log'] == 0),
    (data['Current_tier'] == 'High') & (data['control_panel_log1'] == 1) & (data['snort_log1'] == 0) & (data['relay1_log'] == 1),
    (data['Current_tier'] == 'High') & (data['control_panel_log1'] == 1) & (data['snort_log1'] == 1) & (data['relay1_log'] == 0),
    (data['Current_tier'] == 'High') & (data['control_panel_log1'] == 1) & (data['snort_log1'] == 1) & (data['relay1_log'] == 1),
    ]

# create a list of the values we want to assign for each condition
values = ['Attack', 'Natural', 'Attack', 'Attack', 'Attack', 'No event', 'Natural', 'Natural',
          'Attack', 'Natural', 'Attack', 'Attack', 'No event', 'Attack', 'Attack', 'Natural',
          'Attack', 'Attack', 'Attack', 'Attack', 'No event', 'Attack', 'Natural', 'Natural',
          'Attack', 'Attack', 'Attack', 'Attack', 'No event', 'Attack', 'Attack', 'Natural']

# create a new column and use np.select to assign values to it using our lists as arguments
data['Pred_Marker1'] = np.select(conditions, values)

# Declare real Relay conditions for R2

# create a list of conditions
conditions = [
    (data['Current_tier'] == 'Normal') & (data['control_panel_log2'] == 0) & (data['snort_log2'] == 0) & (data['relay2_log'] == 0),
    (data['Current_tier'] == 'Normal') & (data['control_panel_log2'] == 0) & (data['snort_log2'] == 0) & (data['relay2_log'] == 1),
    (data['Current_tier'] == 'Normal') & (data['control_panel_log2'] == 0) & (data['snort_log2'] == 1) & (data['relay2_log'] == 0),
    (data['Current_tier'] == 'Normal') & (data['control_panel_log2'] == 0) & (data['snort_log2'] == 1) & (data['relay2_log'] == 1),
    (data['Current_tier'] == 'Normal') & (data['control_panel_log2'] == 1) & (data['snort_log2'] == 0) & (data['relay2_log'] == 0),
    (data['Current_tier'] == 'Normal') & (data['control_panel_log2'] == 1) & (data['snort_log2'] == 0) & (data['relay2_log'] == 1),
    (data['Current_tier'] == 'Normal') & (data['control_panel_log2'] == 1) & (data['snort_log2'] == 1) & (data['relay2_log'] == 0),
    (data['Current_tier'] == 'Normal') & (data['control_panel_log2'] == 1) & (data['snort_log2'] == 1) & (data['relay2_log'] == 1),

    (data['Current_tier'] == 'Zero') & (data['control_panel_log2'] == 0) & (data['snort_log2'] == 0) & (data['relay2_log'] == 0),
    (data['Current_tier'] == 'Zero') & (data['control_panel_log2'] == 0) & (data['snort_log2'] == 0) & (data['relay2_log'] == 1),
    (data['Current_tier'] == 'Zero') & (data['control_panel_log2'] == 0) & (data['snort_log2'] == 1) & (data['relay2_log'] == 0),
    (data['Current_tier'] == 'Zero') & (data['control_panel_log2'] == 0) & (data['snort_log2'] == 1) & (data['relay2_log'] == 1),
    (data['Current_tier'] == 'Zero') & (data['control_panel_log2'] == 1) & (data['snort_log2'] == 0) & (data['relay2_log'] == 0),
    (data['Current_tier'] == 'Zero') & (data['control_panel_log2'] == 1) & (data['snort_log2'] == 0) & (data['relay2_log'] == 1),
    (data['Current_tier'] == 'Zero') & (data['control_panel_log2'] == 1) & (data['snort_log2'] == 1) & (data['relay2_log'] == 0),
    (data['Current_tier'] == 'Zero') & (data['control_panel_log2'] == 1) & (data['snort_log2'] == 1) & (data['relay2_log'] == 1),

    (data['Current_tier'] == 'Warning') & (data['control_panel_log2'] == 0) & (data['snort_log2'] == 0) & (data['relay2_log'] == 0),
    (data['Current_tier'] == 'Warning') & (data['control_panel_log2'] == 0) & (data['snort_log2'] == 0) & (data['relay2_log'] == 1),
    (data['Current_tier'] == 'Warning') & (data['control_panel_log2'] == 0) & (data['snort_log2'] == 1) & (data['relay2_log'] == 0),
    (data['Current_tier'] == 'Warning') & (data['control_panel_log2'] == 0) & (data['snort_log2'] == 1) & (data['relay2_log'] == 1),
    (data['Current_tier'] == 'Warning') & (data['control_panel_log2'] == 1) & (data['snort_log2'] == 0) & (data['relay2_log'] == 0),
    (data['Current_tier'] == 'Warning') & (data['control_panel_log2'] == 1) & (data['snort_log2'] == 0) & (data['relay2_log'] == 1),
    (data['Current_tier'] == 'Warning') & (data['control_panel_log2'] == 1) & (data['snort_log2'] == 1) & (data['relay2_log'] == 0),
    (data['Current_tier'] == 'Warning') & (data['control_panel_log2'] == 1) & (data['snort_log2'] == 1) & (data['relay2_log'] == 1),

    (data['Current_tier'] == 'High') & (data['control_panel_log2'] == 0) & (data['snort_log2'] == 0) & (data['relay2_log'] == 0),
    (data['Current_tier'] == 'High') & (data['control_panel_log2'] == 0) & (data['snort_log2'] == 0) & (data['relay2_log'] == 1),
    (data['Current_tier'] == 'High') & (data['control_panel_log2'] == 0) & (data['snort_log2'] == 1) & (data['relay2_log'] == 0),
    (data['Current_tier'] == 'High') & (data['control_panel_log2'] == 0) & (data['snort_log2'] == 1) & (data['relay2_log'] == 1),
    (data['Current_tier'] == 'High') & (data['control_panel_log2'] == 1) & (data['snort_log2'] == 0) & (data['relay2_log'] == 0),
    (data['Current_tier'] == 'High') & (data['control_panel_log2'] == 1) & (data['snort_log2'] == 0) & (data['relay2_log'] == 1),
    (data['Current_tier'] == 'High') & (data['control_panel_log2'] == 1) & (data['snort_log2'] == 1) & (data['relay2_log'] == 0),
    (data['Current_tier'] == 'High') & (data['control_panel_log2'] == 1) & (data['snort_log2'] == 1) & (data['relay2_log'] == 1),
    ]
data['Pred_Marker2'] = np.select(conditions, values)

# Declare real Relay conditions for R3

# create a list of conditions
conditions = [
    (data['Current_tier'] == 'Normal') & (data['control_panel_log3'] == 0) & (data['snort_log3'] == 0) & (data['relay3_log'] == 0),
    (data['Current_tier'] == 'Normal') & (data['control_panel_log3'] == 0) & (data['snort_log3'] == 0) & (data['relay3_log'] == 1),
    (data['Current_tier'] == 'Normal') & (data['control_panel_log3'] == 0) & (data['snort_log3'] == 1) & (data['relay3_log'] == 0),
    (data['Current_tier'] == 'Normal') & (data['control_panel_log3'] == 0) & (data['snort_log3'] == 1) & (data['relay3_log'] == 1),
    (data['Current_tier'] == 'Normal') & (data['control_panel_log3'] == 1) & (data['snort_log3'] == 0) & (data['relay3_log'] == 0),
    (data['Current_tier'] == 'Normal') & (data['control_panel_log3'] == 1) & (data['snort_log3'] == 0) & (data['relay3_log'] == 1),
    (data['Current_tier'] == 'Normal') & (data['control_panel_log3'] == 1) & (data['snort_log3'] == 1) & (data['relay3_log'] == 0),
    (data['Current_tier'] == 'Normal') & (data['control_panel_log3'] == 1) & (data['snort_log3'] == 1) & (data['relay3_log'] == 1),

    (data['Current_tier'] == 'Zero') & (data['control_panel_log3'] == 0) & (data['snort_log3'] == 0) & (data['relay3_log'] == 0),
    (data['Current_tier'] == 'Zero') & (data['control_panel_log3'] == 0) & (data['snort_log3'] == 0) & (data['relay3_log'] == 1),
    (data['Current_tier'] == 'Zero') & (data['control_panel_log3'] == 0) & (data['snort_log3'] == 1) & (data['relay3_log'] == 0),
    (data['Current_tier'] == 'Zero') & (data['control_panel_log3'] == 0) & (data['snort_log3'] == 1) & (data['relay3_log'] == 1),
    (data['Current_tier'] == 'Zero') & (data['control_panel_log3'] == 1) & (data['snort_log3'] == 0) & (data['relay3_log'] == 0),
    (data['Current_tier'] == 'Zero') & (data['control_panel_log3'] == 1) & (data['snort_log3'] == 0) & (data['relay3_log'] == 1),
    (data['Current_tier'] == 'Zero') & (data['control_panel_log3'] == 1) & (data['snort_log3'] == 1) & (data['relay3_log'] == 0),
    (data['Current_tier'] == 'Zero') & (data['control_panel_log3'] == 1) & (data['snort_log3'] == 1) & (data['relay3_log'] == 1),

    (data['Current_tier'] == 'Warning') & (data['control_panel_log3'] == 0) & (data['snort_log3'] == 0) & (data['relay3_log'] == 0),
    (data['Current_tier'] == 'Warning') & (data['control_panel_log3'] == 0) & (data['snort_log3'] == 0) & (data['relay3_log'] == 1),
    (data['Current_tier'] == 'Warning') & (data['control_panel_log3'] == 0) & (data['snort_log3'] == 1) & (data['relay3_log'] == 0),
    (data['Current_tier'] == 'Warning') & (data['control_panel_log3'] == 0) & (data['snort_log3'] == 1) & (data['relay3_log'] == 1),
    (data['Current_tier'] == 'Warning') & (data['control_panel_log3'] == 1) & (data['snort_log3'] == 0) & (data['relay3_log'] == 0),
    (data['Current_tier'] == 'Warning') & (data['control_panel_log3'] == 1) & (data['snort_log3'] == 0) & (data['relay3_log'] == 1),
    (data['Current_tier'] == 'Warning') & (data['control_panel_log3'] == 1) & (data['snort_log3'] == 1) & (data['relay3_log'] == 0),
    (data['Current_tier'] == 'Warning') & (data['control_panel_log3'] == 1) & (data['snort_log3'] == 1) & (data['relay3_log'] == 1),

    (data['Current_tier'] == 'High') & (data['control_panel_log3'] == 0) & (data['snort_log3'] == 0) & (data['relay3_log'] == 0),
    (data['Current_tier'] == 'High') & (data['control_panel_log3'] == 0) & (data['snort_log3'] == 0) & (data['relay3_log'] == 1),
    (data['Current_tier'] == 'High') & (data['control_panel_log3'] == 0) & (data['snort_log3'] == 1) & (data['relay3_log'] == 0),
    (data['Current_tier'] == 'High') & (data['control_panel_log3'] == 0) & (data['snort_log3'] == 1) & (data['relay3_log'] == 1),
    (data['Current_tier'] == 'High') & (data['control_panel_log3'] == 1) & (data['snort_log3'] == 0) & (data['relay3_log'] == 0),
    (data['Current_tier'] == 'High') & (data['control_panel_log3'] == 1) & (data['snort_log3'] == 0) & (data['relay3_log'] == 1),
    (data['Current_tier'] == 'High') & (data['control_panel_log3'] == 1) & (data['snort_log3'] == 1) & (data['relay3_log'] == 0),
    (data['Current_tier'] == 'High') & (data['control_panel_log3'] == 1) & (data['snort_log3'] == 1) & (data['relay3_log'] == 1),
    ]
data['Pred_Marker3'] = np.select(conditions, values)

# Declare real Relay conditions for R4

# create a list of conditions
conditions = [
    (data['Current_tier'] == 'Normal') & (data['control_panel_log4'] == 0) & (data['snort_log4'] == 0) & (data['relay4_log'] == 0),
    (data['Current_tier'] == 'Normal') & (data['control_panel_log4'] == 0) & (data['snort_log4'] == 0) & (data['relay4_log'] == 1),
    (data['Current_tier'] == 'Normal') & (data['control_panel_log4'] == 0) & (data['snort_log4'] == 1) & (data['relay4_log'] == 0),
    (data['Current_tier'] == 'Normal') & (data['control_panel_log4'] == 0) & (data['snort_log4'] == 1) & (data['relay4_log'] == 1),
    (data['Current_tier'] == 'Normal') & (data['control_panel_log4'] == 1) & (data['snort_log4'] == 0) & (data['relay4_log'] == 0),
    (data['Current_tier'] == 'Normal') & (data['control_panel_log4'] == 1) & (data['snort_log4'] == 0) & (data['relay4_log'] == 1),
    (data['Current_tier'] == 'Normal') & (data['control_panel_log4'] == 1) & (data['snort_log4'] == 1) & (data['relay4_log'] == 0),
    (data['Current_tier'] == 'Normal') & (data['control_panel_log4'] == 1) & (data['snort_log4'] == 1) & (data['relay4_log'] == 1),

    (data['Current_tier'] == 'Zero') & (data['control_panel_log4'] == 0) & (data['snort_log4'] == 0) & (data['relay4_log'] == 0),
    (data['Current_tier'] == 'Zero') & (data['control_panel_log4'] == 0) & (data['snort_log4'] == 0) & (data['relay4_log'] == 1),
    (data['Current_tier'] == 'Zero') & (data['control_panel_log4'] == 0) & (data['snort_log4'] == 1) & (data['relay4_log'] == 0),
    (data['Current_tier'] == 'Zero') & (data['control_panel_log4'] == 0) & (data['snort_log4'] == 1) & (data['relay4_log'] == 1),
    (data['Current_tier'] == 'Zero') & (data['control_panel_log4'] == 1) & (data['snort_log4'] == 0) & (data['relay4_log'] == 0),
    (data['Current_tier'] == 'Zero') & (data['control_panel_log4'] == 1) & (data['snort_log4'] == 0) & (data['relay4_log'] == 1),
    (data['Current_tier'] == 'Zero') & (data['control_panel_log4'] == 1) & (data['snort_log4'] == 1) & (data['relay4_log'] == 0),
    (data['Current_tier'] == 'Zero') & (data['control_panel_log4'] == 1) & (data['snort_log4'] == 1) & (data['relay4_log'] == 1),

    (data['Current_tier'] == 'Warning') & (data['control_panel_log4'] == 0) & (data['snort_log4'] == 0) & (data['relay4_log'] == 0),
    (data['Current_tier'] == 'Warning') & (data['control_panel_log4'] == 0) & (data['snort_log4'] == 0) & (data['relay4_log'] == 1),
    (data['Current_tier'] == 'Warning') & (data['control_panel_log4'] == 0) & (data['snort_log4'] == 1) & (data['relay4_log'] == 0),
    (data['Current_tier'] == 'Warning') & (data['control_panel_log4'] == 0) & (data['snort_log4'] == 1) & (data['relay4_log'] == 1),
    (data['Current_tier'] == 'Warning') & (data['control_panel_log4'] == 1) & (data['snort_log4'] == 0) & (data['relay4_log'] == 0),
    (data['Current_tier'] == 'Warning') & (data['control_panel_log4'] == 1) & (data['snort_log4'] == 0) & (data['relay4_log'] == 1),
    (data['Current_tier'] == 'Warning') & (data['control_panel_log4'] == 1) & (data['snort_log4'] == 1) & (data['relay4_log'] == 0),
    (data['Current_tier'] == 'Warning') & (data['control_panel_log4'] == 1) & (data['snort_log4'] == 1) & (data['relay4_log'] == 1),

    (data['Current_tier'] == 'High') & (data['control_panel_log4'] == 0) & (data['snort_log4'] == 0) & (data['relay4_log'] == 0),
    (data['Current_tier'] == 'High') & (data['control_panel_log4'] == 0) & (data['snort_log4'] == 0) & (data['relay4_log'] == 1),
    (data['Current_tier'] == 'High') & (data['control_panel_log4'] == 0) & (data['snort_log4'] == 1) & (data['relay4_log'] == 0),
    (data['Current_tier'] == 'High') & (data['control_panel_log4'] == 0) & (data['snort_log4'] == 1) & (data['relay4_log'] == 1),
    (data['Current_tier'] == 'High') & (data['control_panel_log4'] == 1) & (data['snort_log4'] == 0) & (data['relay4_log'] == 0),
    (data['Current_tier'] == 'High') & (data['control_panel_log4'] == 1) & (data['snort_log4'] == 0) & (data['relay4_log'] == 1),
    (data['Current_tier'] == 'High') & (data['control_panel_log4'] == 1) & (data['snort_log4'] == 1) & (data['relay4_log'] == 0),
    (data['Current_tier'] == 'High') & (data['control_panel_log4'] == 1) & (data['snort_log4'] == 1) & (data['relay4_log'] == 1),
    ]
data['Pred_Marker4'] = np.select(conditions, values)

# Multiple input Naive Bayes

X = data[['Current_tier', 'control_panel_log1', 'snort_log1', 'relay1_log']]
y = data[['Pred_Marker1']]

from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import LabelEncoder

enc = LabelEncoder()

X['Current_tier'] = enc.fit_transform(X['Current_tier'])
y['Pred_Marker1'] = enc.fit_transform(y['Pred_Marker1'])

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=101)

# Adaboost algorithm
from sklearn.ensemble import AdaBoostClassifier

abc = AdaBoostClassifier(n_estimators=50, learning_rate=1)
# Train Adaboost Classifer
model = abc.fit(X_train, y_train)

import time
start = time.time()
pred = model.predict(X_test)
end = time.time()
print(end - start, "seconds - Adaboost")

from sklearn.metrics import accuracy_score
accuracy_score(y_test, pred)